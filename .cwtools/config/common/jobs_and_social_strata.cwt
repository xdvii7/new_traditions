
types = {
	type[job] = {
		path = "game/common/pop_jobs"
		subtype[uncapped_by_modifier] = {
			## cardinality = 0..1
			is_capped_by_modifier = yes
		}
		subtype[possible] = {
			## cardinality = 0..1
			possible = {
				## cardinality = 0..0
				always = no
			}
		}
		modifiers = {
			"job_$_add" = Planets
			"job_$_per_pop" = Planets
			"job_$_per_crime" = Planets
		}
		localisation = {
			## required
			Name = "job_$"
			## optional
			Plural = "job_$_plural"
			## optional
			Desc = "job_$_desc"
			subtype[uncapped_by_modifier] = {
				## required
				Modifier = "mod_job_$_add"
				## optional
				"Per Pop Modifier" = "mod_job_$_per_pop"
				## optional
				"Per Pop Modifier (short)" = "mod_job_$_per_pop_short"
			}
			subtype[possible] = {
				## required
				Plural = "job_$_plural"
				## required
				Desc = "job_$_desc"
			}
		}
	}
	type[social_strata] = {
		path = "game/common/pop_categories"
		modifiers = {
			"pop_cat_$_happiness" = Pops
			"pop_cat_$_political_power" = Pops
		}
		localisation = {
			## required
			Name = "pop_cat_$"
			## required
			Plural = "pop_cat_$_plural"
			## required
			Desc = "pop_cat_$_desc"
		}
	}
	type[job_tags] = {
		path = "game/common/job_tags"
		type_per_file = yes
	}
}

enums = {
	enum[job_categories] = {
		specialist
		worker
		simple_drone
		complex_drone
		pre_sapients
		ruler
		precursor
	}
}

## push_scope = pop_group
job = {
	## cardinality = 0..inf
	desc = {
		## replace_scope = { this = planet root = planet }
		trigger = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		text = localisation
	}

	## cardinality = 0..1
	category = <social_strata>
	## cardinality = 0..1
	can_be_automated = bool
	## cardinality = 0..1
	first_come_first_served = bool
	## cardinality = 0..1
	condition_string = localisation
	## cardinality = 0..1
	building_icon = <building>
	## cardinality = 0..1
	building_icon = icon[gfx/interface/icons/buildings]
	## cardinality = 0..1
	building_icon = icon[gfx/interface/icons/buildings/old_production]
	#building_icon = <sprite>
	## cardinality = 0..1
	clothes_texture_index = int
	## cardinality = 0..1
	icon = filepath[gfx/interface/icons/jobs/job_,.dds]

	## cardinality = 0..1
	exempt_from_ai_amenity_prioritization = bool
	## cardinality = 0..1
	is_capped_by_modifier = bool
	## cardinality = 0..1
	count_as_available_for_ai = bool
	## cardinality = 0..1
	can_set_priority = bool
	## cardinality = 0..1
	is_pre_sapient = bool
	## cardinality = 0..1
	ignores_sapience = bool
	## cardinality = 0..1
	ignores_favorite = bool
	## cardinality = 0..1
	purge = <purge_type>

	## cardinality = 0..1
	###Sets whether the job contributes to diplo weight. Default = yes
	contributes_to_diplo_weight = bool

	## cardinality = 0..1
	### Only uses certain simple triggers.
	possible_pre_triggers = {
		alias_name[pop_pre_trigger] = alias_match_left[pop_pre_trigger]
	}
	
	## cardinality = 0..1
	possible_precalc = can_fill_ruler_job
	## cardinality = 0..1
	possible_precalc = can_fill_specialist_job
	## cardinality = 0..1
	possible_precalc = can_fill_worker_job
	## cardinality = 0..1
	possible_precalc = can_fill_drone_job
	## cardinality = 0..1
	possible_precalc = can_fill_precursor_job
	## cardinality = 0..1
	possible_precalc = enum[job_triggers]

	## cardinality = 0..1
	possible = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	# pop jobs requires some of these to be planet scope unlike all other files so I had to build separate as I could get the scope change to work in economic template.  It works here as is.  So Caligula PLEASE leave as is.
	# inline script also uses so set to .inf
	## cardinality = 0..inf
	resources = {
		## cardinality = 0..1
		category = <economic_category>
				
		# pop jobs requires this to be planet scope unlike other files.  Caligula PLEASE leave as is.
		## cardinality = 0..inf
		produces = {
			## cardinality = 0..1
			## replace_scope = { this = planet root = planet }
			trigger = {
				alias_name[trigger] = alias_match_left[trigger]
			}
			## cardinality = 0..inf
			<resource> = float
			## cardinality = 0..inf
			multiplier = value_field
			## cardinality = 0..inf
			mult = value_field
		}
		
		# pop jobs requires this to be planet scope unlike other files.  Caligula PLEASE leave as is.
		## cardinality = 0..inf
		upkeep = {
			## cardinality = 0..1
			## replace_scope = { this = planet root = planet }
			trigger = {
				alias_name[trigger] = alias_match_left[trigger]
			}
			## cardinality = 0..inf
			<resource> = float
			## cardinality = 0..inf
			multiplier = value_field
			## cardinality = 0..inf
			mult = value_field
		}
	}

	## cardinality = 0..1
	overlord_resources = {
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}
	
	## cardinality = 0..1
	## replace_scope = { this = pop_group root = pop_group }
	pop_modifier = {
		alias_name[modifier] = alias_match_left[modifier]
	}

	## replace_scope = { this = country root = country }
	## cardinality = 0..1
	country_modifier = {
		alias_name[modifier] = alias_match_left[modifier]
	}
		
	## cardinality = 0..1
	## replace_scope = { this = system root = system }
	system_modifier = {
		alias_name[modifier] = alias_match_left[modifier]
	}
	
	# inline script maybe also uses so set to card 0 to inf
	## cardinality = 0..inf
	## replace_scope = { this = planet root = planet }
	### Multiple planet_modifiers blocks result in only the last one applying
	planet_modifier = {
		alias_name[modifier] = alias_match_left[modifier]
	}
	
	## cardinality = 0..1
	alias_name[triggered_planet_modifier_pop] = alias_match_left[triggered_planet_modifier_pop]
	
	# for inline script
	## cardinality = 0..1
	alias_name[triggered_planet_modifier_planet] = alias_match_left[triggered_planet_modifier_planet]
	
	# for inline script
	## cardinality = 0..1
	alias_name[triggered_country_modifier_planet] = alias_match_left[triggered_country_modifier_planet]
	
	## cardinality = 0..1
	alias_name[triggered_country_modifier_pop] = alias_match_left[triggered_country_modifier_pop]
	
	## cardinality = 0..1
	alias_name[triggered_planet_modifier_pop_group] = alias_match_left[triggered_planet_modifier_pop_group]
	
	## cardinality = 0..1
	alias_name[triggered_planet_pop_group_modifier_species] = alias_match_left[triggered_planet_pop_group_modifier_species]

	
	## cardinality = 0..1
	alias_name[triggered_pop_modifier] = alias_match_left[triggered_pop_modifier]

	## cardinality = 0..1
	weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
	
	## cardinality = 0..1
	auto_trait_prio = {
		## cardinality = 0..inf
		localisation
	}
	
	## replace_scope = { this = pop_group root = pop_group }
	## cardinality = 0..1
	swappable_data = {
		default = {
			## cardinality = 0..1
			building_icon = icon[gfx/interface/icons/buildings] #todo: filepath
			## cardinality = 0..1
			building_icon = <building>
			## cardinality = 0..1
			icon = filepath[gfx/interface/icons/jobs/job_,.dds]
			## cardinality = 0..1
			desc = localisation
			## cardinality = 0..1
			condition_string = localisation
		}
		## cardinality = 0..inf
		## replace_scope = { this = planet root = planet }
		swap_type = {
			trigger = {
				alias_name[trigger] = alias_match_left[trigger]
			}
			## cardinality = 0..1
			name = <job>
			## cardinality = 0..1
			name = localisation
			## cardinality = 0..1
			desc = localisation
			## cardinality = 0..1
			icon = filepath[gfx/interface/icons/jobs/job_,.dds]
			## cardinality = 0..1
			building_icon = icon[gfx/interface/icons/buildings] #todo: filepath
			## cardinality = 0..1
			building_icon = <building>
			## cardinality = 0..1
			condition_string = localisation
			weight = int
		}
	}
	
	## cardinality = 0..1
	promotion = {
		time = int
		effect = {
			alias_name[effect] = alias_match_left[effect]
		}
	}
	
	# inline script maybe also uses so set to card 0 to inf
	## cardinality = 0..inf
	demotion = {
		time = int
		effect = {
			alias_name[effect] = alias_match_left[effect]
		}
	}
	
	## cardinality = 0..1
	tags = { 
		## cardinality = 0..inf
		<job_tags>
	}
	
	## cardinality = 0..1
	## replace_scope = { this = planet root = planet }
	triggered_tags = {
		trigger = { 
			alias_name[trigger] = alias_match_left[trigger]
		}
		tags = { 
			## cardinality = 0..inf
			<job_tags>
		}
	}

}





## push_scope = pop_group
social_strata = {
	rank = int
	## cardinality = 0..1
	can_change_category = bool
	## cardinality = 0..1
	clothes_texture_index = int

	###This is called whenever a Pop is created, moved to a different planet, or gets a new owner
	## cardinality = 0..1
	assign_to_pop = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## cardinality = 0..inf
	## replace_scope = { this = pop_group root = pop_group }
	pop_group_modifier = {
		alias_name[modifier] = alias_match_left[modifier]
	}
	
	## cardinality = 0..inf
	## replace_scope = { this = pop_group root = pop_group }
	triggered_pop_group_modifier = {
		potential = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		alias_name[modifier] = alias_match_left[modifier]
	}

	###scope: pop_group to be resettled
	allow_resettlement = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	should_apply_unemployment_penalties = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	## replace_scope = { this = planet root = planet }
	unemployment_penalties = {
		alias_name[modifier] = alias_match_left[modifier]
	}

	## cardinality = 0..inf
	resettlement_cost = {
		## cardinality = 0..inf
		<resource> = int
		## cardinality = 0..1
		trigger = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}
	
	## cardinality = 0..1
	unemployment_resources = {
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}

	## cardinality = 0..1
	resources = {
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}

	## cardinality = 0..1
	keep_from_former_job = bool
	## cardinality = 0..1
	demotion_time = int
	## cardinality = 0..1
	change_job_threshold = float
	## cardinality = 0..1
	display_category = <social_strata>
	## cardinality = 0..1
	display_unemployment = bool
	## cardinality = 0..1
	custom_demotion_loc = scalar
	## cardinality = 0..1
	custom_demotion_icon = scalar
	## cardinality = 0..1
	custom_promotion_loc = scalar
	## cardinality = 0..1
	custom_promotion_icon = scalar
	## cardinality = 0..inf
	alias_name[triggered_planet_modifier_pop] = alias_match_left[triggered_planet_modifier_pop]

	## cardinality = 0..inf
	alias_name[triggered_pop_modifier] = alias_match_left[triggered_pop_modifier]
	
	## cardinality = 0..inf
	alias_name[triggered_pop_group_modifier] = alias_match_left[triggered_pop_group_modifier]
}
