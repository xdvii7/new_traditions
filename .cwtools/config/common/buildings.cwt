
types = {
	## graph_related_types = { technology }
	type[building] = {
		path = "game/common/buildings"
		modifiers = {
			"planet_$_build_speed_mult" = Planets
		}
		subtype[corporate] = {
			owner_type = corporate
		}
		subtype[holding] = {
			owner_type = subject_holding
		}
		localisation = {
			## required
			Name = "$"
			## required
			Description = "$_desc"
		}
	}
}

enums = {
	enum[building_categories] = {
		army
		manufacturing
		government
		pop_assembly
		resource
		unity
		research
		trade
		amenity
		planet_buildings
		amenities
	}
	enum[building_owner_type] = {
		normal
		corporate
		subject_holding
	}
	enum[building_sets] = {
		automation
		betharian
		bio_trophy
		cosmogenesis_world
		engineering
		entertainment
		factory
		fallen_empire
		fallen_empire_farming
		fallen_empire_generator
		fallen_empire_mining
		farming
		farming_automation
		fortress
		foundry
		generator
		generator_automation
		government
		hunting_zone
		hydroponics
		industrial
		knights
		medical
		mining
		mining_automation
		origin
		physics
		pre_ftl
		research
		resort
		society
		trade
		unity
		urban
		urban_automation
		zoo
	}
	enum[building_upgrade_flags] = {
		affluence_emporium_can_build
		nourishment_complex_can_build
		dimensional_replicator_can_build
		class_3_singularity_can_build
		micro_forge_can_build
		fe_sky_dome_can_build
		fe_fortress_can_build
		fe_administration_1_can_build
		fe_administration_hive_1_can_build
		fe_administration_machine_1_can_build
		fe_assembly_1_can_build
		fe_clinic_1_can_build
		tech_fe_security_1
		tech_fe_security_1_can_build
		fe_security_1_can_build
		tech_fe_market_1
		fe_market_1_can_build
		fe_silo_1_can_build
		fe_entertainment_1_can_build
		fe_lab_1_can_build
		fe_mine_1_can_build
		reemployment_center_timer
		beholder_psi_pops_timer
		necrophage_elevation_timer
		received_collection_stage_2_reward_aesthetic_wonder
		received_collection_stage_2_reward_xeno_geology
		received_collection_stage_2_reward_historical_item
		dportal_trade_high
		dportal_trade_low
		dportal_trade_crisis
		dportal_trade_normal
		has_private_clinics
	}
	enum[fe_building_upgrade_variables] = {
		affluence_emporium_build_count
		affluence_emporium_build_upgrade_count
		affluence_emporium_upgrade_count
		nourishment_complex_build_count
		nourishment_complex_build_upgrade_count
		nourishment_complex_upgrade_count
		dimensional_replicator_build_count
		dimensional_replicator_build_upgrade_count
		dimensional_replicator_upgrade_count
		class_3_singularity_build_count
		class_3_singularity_build_upgrade_count
		class_3_singularity_upgrade_count
		micro_forge_build_count
		micro_forge_build_upgrade_count
		micro_forge_upgrade_count
		fe_sky_dome_build_count
		fe_sky_dome_build_upgrade_count
		fe_sky_dome_upgrade_count
		fe_fortress_build_count
		fe_fortress_build_upgrade_count
		fe_fortress_upgrade_count
		fe_administration_1_build_count
		fe_administration_1_build_upgrade_count
		fe_administration_1_upgrade_count
		fe_administration_hive_1_build_count
		fe_administration_hive_1_build_upgrade_count
		fe_administration_hive_1_upgrade_count
		fe_administration_machine_1_build_count
		fe_administration_machine_1_build_upgrade_count
		fe_administration_machine_1_upgrade_count
		fe_assembly_1_build_count
		fe_assembly_1_build_upgrade_count
		fe_assembly_1_upgrade_count
		fe_clinic_1_build_count
		fe_clinic_1_build_upgrade_count
		fe_clinic_1_upgrade_count
		fe_security_1_build_count
		fe_security_1_build_upgrade_count
		fe_security_1_upgrade_count
		fe_market_1_build_count
		fe_market_1_build_upgrade_count
		fe_market_1_upgrade_count
		fe_silo_1_build_count
		fe_silo_1_build_upgrade_count
		fe_silo_1_upgrade_count
		fe_entertainment_1_build_count
		fe_entertainment_1_build_upgrade_count
		fe_entertainment_1_upgrade_count
		fe_lab_1_build_count
		fe_lab_1_build_upgrade_count
		fe_lab_1_upgrade_count
		fe_mine_1_build_count
		fe_mine_1_build_upgrade_count
		fe_mine_1_upgrade_count
	}
}

## push_scope = planet
building = {
	## cardinality = 0..inf
	desc = {
		## cardinality = 0..1
		## replace_scope = { this = planet root = planet }
		trigger = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		text = localisation
	}
	## cardinality = 0..1
	owner_type = corporate
	## cardinality = 0..1
	owner_type = subject_holding

	## cardinality = 0..1
	base_buildtime = int
	## cardinality = 0..1
	planet_limit = int
	## cardinality = 0..1
	planet_limit = {
		base = int
		## cardinality = 0..inf
		modifier = {
			alias_name[trigger] = alias_match_left[trigger]
			## cardinality = 0..1
			add = int
			## cardinality = 0..1
			mult = value_field
			# stupid inline script
			## cardinality = 0..1
			has_country_flag = scalar
		}
	}
		
	## cardinality = 0..1
	###whether this building is exempt from being swapped into groups by the AI; default: no
	exempt_from_ai_planet_specialization = bool

	## cardinality = 0..inf
	category = enum[building_categories]

	## cardinality = 0..1
	icon = icon[gfx/interface/icons/buildings] #todo: filepath
	## cardinality = 0..1
	icon = <building>
	## cardinality = 0..1
	ruined_icon = icon[gfx/interface/icons/buildings] #todo: filepath
	## cardinality = 0..1
	ruined_icon = <building>
	## cardinality = 0..1
	capital = bool
	## cardinality = 0..1
	can_demolish = bool
	## cardinality = 0..1
	can_be_ruined = bool
	## cardinality = 0..1
	can_be_disabled = bool
	## cardinality = 0..1
	can_build = bool
	## cardinality = 0..1
	base_cap_amount = int
	## cardinality = 0..1
	add_to_first_building_slot = yes
	## cardinality = 0..1
	is_capped_by_modifier = bool
	## cardinality = 0..1
	planetary_ftl_inhibitor = bool
	## cardinality = 0..1
	position_priority = int
	## cardinality = 0..1
	capital_tier = int
	## cardinality = 0..1
	district_limit = int
	## cardinality = 0..1
	###colony automation will not try to upgrade this
	skip_automation_upgrading = bool

	## cardinality = 0..1
	### used to match with a planet class' building set, can be assigned to multiple sets. Used to remove from construction lists
	building_sets = {
		## cardinality = 1..inf
		enum[building_sets]
	}

	## cardinality = 0..inf
	custom_tooltip = localisation

	## cardinality = 0..1
	allow = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	## replace_scope = { root = country }
	empire_limit = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## cardinality = 0..1
	empire_limit = int

	## cardinality = 0..1
	on_queued = {
		alias_name[effect] = alias_match_left[effect]
	}

	## cardinality = 0..1
	on_unqueued = {
		alias_name[effect] = alias_match_left[effect]
	}

	## cardinality = 0..1
	on_built = {
		alias_name[effect] = alias_match_left[effect]
	}
	
	## cardinality = 0..1
	on_enabled = {
		alias_name[effect] = alias_match_left[effect]
	}

	## cardinality = 0..1
	on_destroy = {
		alias_name[effect] = alias_match_left[effect]
	}

	## cardinality = 0..1
	on_repaired = {
		alias_name[effect] = alias_match_left[effect]
	}

	## cardinality = 0..1
	potential = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	abort_trigger = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	ruined_trigger = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	destroy_trigger = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	## replace_scope = { root = country this = country }
	show_tech_unlock_if = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	alias_name[triggered_planet_modifier_planet] = alias_match_left[triggered_planet_modifier_planet]
	alias_name[triggered_desc] = alias_match_left[triggered_desc]
	alias_name[triggered_country_modifier_planet] = alias_match_left[triggered_country_modifier_planet]
	alias_name[triggered_planet_modifier_pop_group] = alias_match_left[triggered_planet_modifier_pop_group]
	alias_name[triggered_planet_pop_group_modifier_species] = alias_match_left[triggered_planet_pop_group_modifier_species]

	## cardinality = 0..1
	resources = {
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}

	## cardinality = 0..1
	upgrades = {
		## cardinality = 0..inf
		<building>
	}

	## cardinality = 0..inf
	## replace_scope = { this = planet root = planet }
	planet_modifier = {
		alias_name[modifier] = alias_match_left[modifier]
	}
	
	## cardinality = 0..1
	prerequisites = {
		## cardinality = 0..inf
		## incomingReferenceLabel = prereq
		<technology>
	}
	
	## cardinality = 0..1
	custom_storm_ai_weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## cardinality = 0..1
	ai_weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	alias_name[ai_resource_production] = alias_match_left[ai_resource_production]

	## cardinality = 0..inf
	convert_to = {
		## cardinality = 1..inf
		<building>
	}

	## cardinality = 0..1
	## replace_scope = { this = country root = country }
	country_modifier = {
		alias_name[modifier] = alias_match_left[modifier]
	}

	## cardinality = 0..1
	## replace_scope = { this = army root = army }
	army_modifier = {
		alias_name[modifier] = alias_match_left[modifier]
	}

	## cardinality = 0..1
	### Property on buildings which when added to the AI build queue will remove all non essential build tasks.
	is_essential = bool

	## cardinality = 0..1
	### Default = no
	ai_estimate_without_unemployment = bool

	## cardinality = 0..1
	show_in_tech = <technology>
	
	## cardinality = 0..1
	additional_ai_weight = int
	
	## cardinality = 0..1
	ai_weight_coefficient = float
}
