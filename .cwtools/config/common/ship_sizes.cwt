types = {
	type[ship_size] = {
		path = "game/common/ship_sizes"
		subtype[station] = {
			is_space_station = yes
		}
		subtype[ship] = {
			## cardinality = 0..1
			is_space_station = no
		}
		subtype[starbase] = {
			class = shipclass_starbase
		}
		subtype[designable] = {
			## cardinality = 0..1
			is_designable = yes
		}
		localisation = {
			## required
			Name = "$"
			## required
			Plural = "$_plural"
		}
	}
	type[shipset] = {
		path = "game/common/ship_set"
	}
}

ship_size = {
	## cardinality = 0..2
	graphical_culture = {
		## cardinality = 1..inf
		<graphical_culture>
	}
	## cardinality = 0..2
	graphical_culture = bool
	## cardinality = 0..1
	is_space_object = bool
	## cardinality = 0..1
	scales_with_planet = bool
	## cardinality = 0..1
	can_be_inspected = bool
	## cardinality = 0..1
	pre_communications_name = localisation
	## cardinality = 0..1
	entity = <model_entity>
	## cardinality = 0..1
	# reference to other ship_sizes + _entity, handled by manual validator
	entity = scalar
	## cardinality = 0..1
	formation_priority = int
	## cardinality = 0..1
	max_speed = float
	## cardinality = 0..1
	acceleration = float
	## cardinality = 0..1
	rotation_speed = float
	## cardinality = 0..1
	collision_radius = float
	## cardinality = 0..1
	max_hitpoints = int
	## cardinality = 0..1
	is_listed = bool
	## cardinality = 0..1
	components_add_to_cost = bool
	## cardinality = 0..1
	is_designable = bool
	## cardinality = 0..1
	never_mia = bool
	## cardinality = 0..1
	### may be deprecated, tell Dayshine and Caligula if yes
	build_time = int
	## cardinality = 0..1
	is_civilian = bool
	## cardinality = 0..1
	###hides the cloaking button
	cloaking_forbidden = yes
	## cardinality = 0..1
	build_block_radius = int
	## cardinality = 0..1
	can_disable = bool
	## cardinality = 0..1
	never_lost = bool
	## cardinality = 0..1
	ship_family_name = enum[enum_ship_family_name]
	## cardinality = 0..1
	growth_stage_descriptor = localisation
	## cardinality = 0..1
	available_to_everyone = bool
	## cardinality = 0..1
	on_click_sound = <sound_effect>
	## cardinality = 0..1
	is_hero_ship = bool
	## cardinality = 0..1
	custom_state_loc_prefix = scalar
	## cardinality = 0..1
	hero_ship_fleet_background = <sprite>
		
	subtype[starbase] = {
		## cardinality = 0..1
		## replace_scope = { this = starbase root = starbase }
		modifier = {
			alias_name[modifier] = alias_match_left[modifier]
		}
		## cardinality = 0..1
		icon_frame = int
	}
	subtype[!starbase] = {
		## cardinality = 0..1
		## replace_scope = { this = ship root = ship }
		modifier = {
			alias_name[modifier] = alias_match_left[modifier]
		}
	}
	## cardinality = 0..1
	## replace_scope = { this = ship root = ship }
	ship_modifier = {
		alias_name[modifier] = alias_match_left[modifier]
	}
	## cardinality = 0..1
	size_multiplier = float
	## cardinality = 0..1
	hull_scale = float
	## cardinality = 0..1
	fleet_slot_size = int
	## cardinality = 0..1
	section_slots = {
		## cardinality = 1..inf
		scalar = { #this is connected to the section templates and global ship designs files!
			## cardinality = 1..inf
			locator = enum[locators] #this is connected to the ship asset files.
			## cardinality = 1..inf
			locator = scalar #TODO: Some locators are in .mesh files, so are missed by the enum
		}
	}
	## cardinality = 0..1
	###Determines sprites. ship_size_military_1 is default. The following sprite keys are generated from it: GFX_text_<key>, GFX_<key>, GFX_<key>_top, GFX_<key>_top_damaged
	icon = scalar
	## cardinality = 0..1
	use_shipnames_from = <ship_size>
	## cardinality = 0..1
	evaluation_resource = <resource>
	## cardinality = 0..1
	role_background = <sprite>
	## cardinality = 0..1
	is_bio_ship = bool
	## cardinality = 0..1
	bioship_growth_progress_required =value_field
	## cardinality = 0..1
	upgrades_to = <ship_size>

	## cardinality = 0..1
	combat_size_multiplier = int
	## cardinality = 0..1
	num_target_locators = int
	## cardinality = 0..1
	is_space_station = bool
	## cardinality = 0..1
	icon_frame = int
	## cardinality = 0..1
	base_buildtime = int
	## cardinality = 0..1
	can_have_federation_design = bool
	## cardinality = 0..1
	enable_default_design = bool
	## cardinality = 0..1
	enable_3dview_in_ship_browser = bool
	## cardinality = 0..1
	selectable = {
		## cardinality = 0..1
		host_has_dlc = enum[DLCs]
	}
	## cardinality = 0..1
	default_behavior = <ship_behavior>
	## cardinality = 0..1
	####Show up as selectable roles in the ship designer
	ship_roles = {
		## cardinality = 0..inf
		enum[ship_size_ship_roles]
	}
	## cardinality = 0..1
	###List of triggered ship roles, show up in the ship designer when the trigger is true, executes on country scope
	triggered_ship_roles = {
		## cardinality = 1..inf
		{
			name = enum[ship_size_ship_roles]
			## replace_scope = { this = country root = country }
			trigger = {
				alias_name[trigger] = alias_match_left[trigger]
			}
		}
	}
	## cardinality = 0..1
	prerequisites = {
		## cardinality = 0..inf
		<technology>
	}
	#this is where ship classes are defined! this is important for other files, and it also causes the game to auto generate modifiers for each shipclass!
	class = enum[shipsize_classes]
	## cardinality = 0..1
	construction_type = starbase
	## cardinality = 0..1
	construction_type = starbase_shipyard
	## cardinality = 0..1
	construction_type = spaceport
	## cardinality = 0..1
	construction_type = starbase_defenses
	## cardinality = 0..1
	selectable = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	## replace_scope = { root = starbase this = starbase }
	possible_starbase = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	## replace_scope = { root = starbase this = starbase }
	potential_starbase = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..inf
	required_component_set = <component_set.required_component> #this is linked to required components defined as such under component_sets, and is also linked to global_ship_designs!
	## cardinality = 0..1
	valid_target_aggressive_stance = bool
	## cardinality = 0..1
	auto_upgrade = bool
	## cardinality = 0..1
	ship_class_icon_frame = int
	## cardinality = 0..1
	uses_name_prefix = bool
	## cardinality = 0..1
	takes_name_from_ship_design = bool
	## cardinality = 0..1
	flip_control_on_disable = bool
	## cardinality = 0..1
	combat_disengage_chance = float
	## cardinality = 0..1
	###if yes, ship design will have a 3d view in the ship browser
	enable_3dview_in_ship_browser = yes
	## cardinality = 0..1
	## replace_scope = { root = country this = country }
	potential_country = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	## replace_scope = { root = country this = country }
	possible_country = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	## replace_scope = { root = planet this = planet }
	potential_planet = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	## replace_scope = { root = planet this = planet }
	possible_planet = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	## replace_scope = { root = any this = any }
	potential_construction = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	## replace_scope = { root = any this = any }
	possible_construction = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	resources = {
		## cardinality = 0..1
		category = <economic_category>
		## cardinality = 0..inf
		alias_name[economic_template] = alias_match_left[economic_template]
	}

	## cardinality = 0..1
	min_upgrade_cost = {
		## cardinality = 1..inf
		<resource> = float
	}

	## cardinality = 0..1
	ai_ship_data = {
		## cardinality = 0..1
		min = int_value_field
		## cardinality = 0..1
		max = int_value_field
		## cardinality = 0..1
		system_mult = value_field
		## cardinality = 0..1
		planet_mult = value_field
		## cardinality = 0..1
		## replace_scope = { this = country root = country }
		fraction = {
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}
		## cardinality = 0..1
		## replace_scope = { this = country root = country }
		fraction = float
	}
	## cardinality = 0..1
	construction_type = { 
		## cardinality = 0..inf
		enum[construction_type] 
	}
	## cardinality = 0..1
	is_space_fauna_ship = bool
	## cardinality = 0..1
	icon_cloned = scalar
	## cardinality = 0..1
	space_fauna_values = {
		age_threshold = { 
			## cardinality = 0..1
			min = int
			## cardinality = 0..1
			max = int
		}
		culling_value = {
			category = vivarium
			produces = {
				<resource> = value_field
			}
		}
		icon_frame = int
		## cardinality = 0..1
		monthly_initial_breeding_chance = int
		## cardinality = 0..1
		monthly_increased_breeding_chance = int
		## cardinality = 0..1
		breeding_cooldown_months = int
		## cardinality = 0..1
		reanimated_ship_design = localisation
		## cardinality = 0..1
		merge_with_individuals_amount_to_upgrade = int
		## cardinality = 0..1
		can_breed_alone = bool
	}
	## cardinality = 0..1
	ship_category = <grand_archive_ship_category_type>
	## cardinality = 0..1
	mutation_components_size = enum[mutation_components_size]
	## cardinality = 0..1
	is_reanimated = bool
	
	## cardinality = 0..1
	map_icon_override = {
		normal = <sprite>
		mixed = <sprite>
		cloaked = <sprite>
	}
}

shipset = {
	name = localisation
	potential = {
		alias_name[trigger] = alias_match_left[trigger]
	}
}

enums = {
	complex_enum[shipsize_classes] = {
		path = "game/common/ship_sizes"
		name = {
			class = enum_name
		}
	}
	complex_enum[section_slots] = {
		path = "game/common/ship_sizes"
		name = {
			section_slots = {
				enum_name = {
				}
			}
		}
	}
	enum[ship_size_ship_roles] = {
		artillery
		artillery_stealth
		brawler
		brawler_stealth
		buffer_role
		buffer_role_stealth
		carrier
		carrier_stealth
		citadel
		debuffer_role
		debuffer_role_stealth
		energy_torpedoes
		energy_torpedoes_stealth
		explosive
		explosive_stealth
		gunship
		gunship_stealth
		screen
		screen_stealth
	}
	enum[mutation_components_size] = {
		small
		medium
		large
		extra_large
	}
	enum[enum_ship_family_name] = {
		harbinger_class
		mauler_class
		offspring_harbinger_class
		offspring_mauler_class
		offspring_stinger_class
		offspring_weaver_class
		stinger_class
		weaver_class
	}
}
