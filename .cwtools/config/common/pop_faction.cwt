types = {
	type[pop_faction] = {
		path = "game/common/pop_faction_types"
		localisation = {
			## required
			Name = "pft_$"
			## required
			Description = "pft_$_desc"
		}
	}
}

# parameters
enums = {
	complex_enum[pop_faction_parameters] = {
		path = "game/common/pop_faction_types"
		name = {
			parameters = {
				enum_name = {}
			}
		}
	}
}

# actions
enums = {
	complex_enum[pop_faction_actions] = {
		path = "game/common/pop_faction_types"
		name = {
			actions = {
				enum_name = {}
			}
		}
	}
}

pop_faction = {

	### Allows to have multiple of this faction type within a single country
	unique = bool

	## cardinality = 0..1
	### How much extra weight will receive a candidate from this faction
	support_multiplier = float

	## cardinality = 0..1
	### Primary ethic for this faction
	guiding_ethic = <ethos>

	## cardinality = 0..1
	visual_ethic = localisation

	## cardinality = 0..1
	use_guiding_ethic_as_pop_filter = bool
	
	## cardinality = 0..1
	persistent_faction = bool
	## cardinality = 0..1
	can_rename = bool

	## cardinality = 0..1
	### UI color for candidate header
	election_header =  <sprite>

	## cardinality = 0..1
	### This = Country. Existence requirements for this faction
	is_potential = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	# This = Country. Parameters, tied to this faction
	parameters = {
		## cardinality = 0..1
		scalar = {
			## cardinality = 1..1
			type = enum[scope_type_tokens]
			## cardinality = 0..1
			valid_objects = {
				alias_name[trigger] = alias_match_left[trigger]
			}
		}
	}

	## cardinality = 0..1
	### This = Pop faction. Existence requirements for defined parameter
	valid = {
		## cardinality = 0..1
		alias_name[trigger] = alias_match_left[trigger]
		## cardinality = 0..1
		parameter:sector = { ### HAS TO BE REWORKED !!! ###
			## cardinality = 0..1
			debug_scope_type = scope[any]
			## cardinality = 0..1
			alias_name[trigger] = alias_match_left[trigger]
		}
	}

	## cardinality = 0..1
	### This = Pop. Determines which pops are able to join this faction. Only uses certain simple triggers.
	can_join_pre_triggers = {
		alias_name[pop_pre_trigger] = alias_match_left[pop_pre_trigger]
	}

	### This = Pop. Determines which pops are able to join this faction
	can_join_faction = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	### This = Pop. Pop's willingness weight to join this faction
	attraction = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## cardinality = 0..1
	### This = Leader. Pop's willingness weight to join this faction
	leader = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]

	}

	## cardinality = 0..1
	### This = Pop faction. Some effects, immediately after faction has been established.
	on_create = {

		## cardinality = 0..1
		alias_name[effect] = alias_match_left[effect]

	}

	## cardinality = 0..1
	### This = Pop faction. Some effects, immediately after faction has been removed.
	on_destroy = {

		## cardinality = 0..1
		alias_name[effect] = alias_match_left[effect]

	}

	## cardinality = 0..inf
	### This = Pop faction. Faction dynamic requests & issues.
	demand = {

		## cardinality = 0..1
		### Issue title, shown in faction manager screen
		title = localisation

		## cardinality = 0..1
		### Unfulfilled issue title, shown in faction manager screen
		unfulfilled_title = localisation

		## cardinality = 0..1
		### Issue full description, shown in faction manager screen
		desc = localisation

		## cardinality = 0..1
		### Positive happiness effect on faction, if demand is satisfied
		fulfilled_effect = float

		## cardinality = 0..1
		### Negative happiness effect on faction, if demand is not satisfied
		unfulfilled_effect = float
		
		## cardinality = 0..1
		### Council Demand
		council_demand = bool

		## cardinality = 0..1
		### This = Pop faction.
		potential = {
			alias_name[trigger] = alias_match_left[trigger]
		}

		## cardinality = 1..1
		### This = Pop faction.
		trigger = {
			alias_name[trigger] = alias_match_left[trigger]
		}

	}

	## cardinality = 0..1
	### This = Pop faction. Actions for this pop faction type (buttons)
	actions = {

		## cardinality = 0..inf
		scalar = {
			## cardinality = 0..1
			title = localisation
			## cardinality = 0..1
			description = localisation

			## cardinality = 0..1
			cost = {
				<resource> = int
			}

			## cardinality = 0..1
			### This = Pop faction.
			potential = {
				alias_name[trigger] = alias_match_left[trigger]
			}

			## cardinality = 0..1
			### This = Pop faction.
			valid = {
				alias_name[trigger] = alias_match_left[trigger]
			}

			## cardinality = 0..1
			### This = Pop faction.
			effect = {
				alias_name[effect] = alias_match_left[effect]
			}

			## cardinality = 0..1
			### This = Pop faction.
			ai_weight = {
				alias_name[modifier_rule] = alias_match_left[modifier_rule]
			}

		}

	}
	resources = {
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}
	
	extortion_resource = {
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}
}

# # Note every pop faction file in game is in error and Dayshine does not respond.  Had to hard code using enums to work with has_country_flag in triggers file.
enums = {
	enum[pop_faction_inline_flag_enum] = {
		galcom_resolution_passed_anti_imperialist
		galcom_resolution_passed_pro_imperialist
		galcom_resolution_passed_anti_isolationist
		galcom_resolution_passed_pro_isolationist
		galcom_resolution_passed_anti_traditionalist
		galcom_resolution_passed_pro_traditionalist
		galcom_resolution_passed_anti_progressive
		galcom_resolution_passed_pro_progressive
		galcom_resolution_passed_anti_prosperity
		galcom_resolution_passed_pro_prosperity
		galcom_resolution_passed_anti_supremacist
		galcom_resolution_passed_pro_supremacist
		galcom_resolution_passed_anti_technologist
		galcom_resolution_passed_pro_technologist
		galcom_resolution_passed_anti_totalitarian
		galcom_resolution_passed_pro_totalitarian
		galcom_resolution_passed_anti_xenoist
		galcom_resolution_passed_pro_xenoist
	}
}
