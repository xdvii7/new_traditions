
types = {
	type[zones] = {
		path = "game/common/zones"
	}
	type[zone_slots] = {
		path = "game/common/zone_slots"
	}	
}

zones = {
	## cardinality = 0..1
	icon = <sprite>
	## cardinality = 0..1
	base_buildtime = int
	## cardinality = 0..1
	max_buildings_planet_class = bool
	
	## cardinality = 0..1
	swap_type = <district>
	## cardinality = 0..1
	swap_type_weight = int
	
	## cardinality = 0..1
	## replace_scope = { root = planet this = planet }
	potential = { 
		## cardinality = 0..inf
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	planet_limit = {
		base = int
	}
	## cardinality = 0..1
	## replace_scope = { root = planet this = planet }
	unlock = { 
		## cardinality = 0..inf
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	resources = {
		category = planet_zones
		cost = {
			<resource> = int
		}
	}
	## cardinality = 0..1
	ai_resource_production = {
		## cardinality = 0..inf
   		<resource> = int
		## cardinality = 0..1
		trigger = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}
		
	## cardinality = 0..inf
	## replace_scope = { root = planet this = planet }
	triggered_district_planet_modifier = {
		alias_name[modifier] = alias_match_left[modifier]
	}
	## cardinality = 0..1
	## replace_scope = { root = planet this = planet }
	planet_modifier = {
		alias_name[modifier] = alias_match_left[modifier]
	}
	## cardinality = 0..inf
	triggered_desc = {
		## cardinality = 0..1
		trigger = {
			## cardinality = 0..inf
			alias_name[trigger] = alias_match_left[trigger]
		}
		text = localisation
	}

	## cardinality = 0..1
	max_buildings = int
	
	## cardinality = 0..1
	zone_sets = {
		## cardinality = 0..inf
		enum[zone_set]
		## cardinality = 0..inf
		enum[zone_set_additional]
	}
	
	## cardinality = 0..1
	include = {
		## cardinality = 0..1
		all
		## cardinality = 0..inf
		<building>
	}
	
	## cardinality = 0..1
	included_building_sets = {
		## cardinality = 0..inf
		enum[building_sets]
	}
	
	## cardinality = 0..1
	excluded_building_sets = {
		## cardinality = 0..inf
		enum[building_sets]
	}
	
	## cardinality = 0..1
	convert_to = {
		## cardinality = 0..inf
		<zones>
		## cardinality = 0..inf
		enum[zone_type]
	}
	
	## cardinality = 0..1
	show_in_tech = <technology>
	
	# for inline scripts to remove errors
	## cardinality = 0..inf
	alias_name[triggered_district_modifier_planet] = alias_match_left[triggered_district_modifier_planet]
	
	# for inline scripts to remove errors
	## cardinality = 0..inf
	alias_name[triggered_planet_modifier_planet] = alias_match_left[triggered_planet_modifier_planet]	
	## cardinality = 0..1
	ai_priority = int
	## cardinality = 0..inf
	ai_weight_coefficient = float
}

zone_slots = {

	## cardinality = 0..1
	start = <zones>
	## cardinality = 0..1
	start = enum[zone_type]
	
	## cardinality = 0..1
	included_zone_sets = {
		## cardinality = 0..inf
		enum[zone_set]
		## cardinality = 0..inf
		enum[zone_set_additional]
	}

	## cardinality = 0..1
	include = {
		## cardinality = 0..inf
		<zones>
		## cardinality = 0..inf
		enum[zone_type]
	}

	## cardinality = 0..1
	exclude = {
		## cardinality = 0..inf
		<zones>
		## cardinality = 0..inf
		enum[zone_type]
	}

	## cardinality = 0..1
	## replace_scope = { root = planet this = planet from = planet }
    potential = { 
        alias_name[trigger] = alias_match_left[trigger]
    }

	## cardinality = 0..1
	## replace_scope = { root = planet this = planet from = planet }
	unlock = { 
		alias_name[trigger] = alias_match_left[trigger]
	}
}

enums = {
	enum[zone_type] = {
		all
		any
	}
	complex_enum[zone_set] = {
		path = "game/common/zones"
		name = {
			zone_sets = {
				enum_name
			}
		}
	}
	enum[zone_set_additional] = {
		zone_default
	}
}
