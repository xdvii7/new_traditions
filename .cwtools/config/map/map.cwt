types = {
	type[map_galaxy_shape] = {
		path = "game/map/galaxy"
	}
	type[map_setup_scenario] = {
		path = "game/map/setup_scenarios"
		name_field = name

		## type_key_filter = static_galaxy_scenario
		subtype[static] = {
		}
		## type_key_filter = setup_scenario
		subtype[random] = {
		}
	}
}


map_galaxy_shape = {
	### Core radius is x% of the galaxy radius
	##cardinality = 0..1
	core_radius_perc = float
	### Number of stars in core
	##cardinality = 0..1
	num_stars_core_perc = float
	### Min distance between stars
	##cardinality = 0..1
	stars_min_dist = float

	##cardinality = 0..1
	countries = {
		### int*int Ideal square distance between countries
		ideal_sq_dist_between = int
		### int*int Min square distance between countries
		min_sq_dist_between = int
	}

	##cardinality = 0..1
	fallen_empires = {
		### int*int Ideal square distance between countries
		ideal_sq_dist_between = int
		### int*int Min square distance between countries
		min_sq_dist_between = int
	}
	
	##cardinality = 0..1
	preview_icon = <sprite>
	##cardinality = 0..1
	button_icon = <sprite>
	##cardinality = 0..1
	desc = localisation
	
	
	##cardinality = 0..1
    num_arms = int
	
	##cardinality = 0..1
	ring = {
		### Percentage of radius to use as the width of the ring
		width = float
		### Percentage of radius to use as the offset from center for the ring
		offset = float
	}
	
	##cardinality = 0..1
	arms = {
		### Tightness of winding
		tightness_winding = float
		### Arm width in degrees
		width = float
		### Maximum outliers distance from arms
		fuzz = float
		### Separation (in degrees) between each arm
		seperation = float
	}
}

map_setup_scenario = {
	name = localisation
	### priority decides in which order the scenarios are listed
	priority = int
	### limits player customization
	num_empires = {
		min = int
		max = int
	}
	num_empire_default = int
	fallen_empire_default = int
	fallen_empire_max = int
	marauder_empire_default = int
	marauder_empire_max = int
	advanced_empire_default = int
	##cardinality = 0..1
	colonizable_planet_odds = float
	##cardinality = 0..1
	primitive_odds = float
	crisis_strength = float
	##cardinality = 0..1
	extra_crisis_strength = {
		##cardinality = 1..2
		int
	}
	##cardinality = 0..1
	default = bool
	##cardinality = 0..1
	max_hyperlane_distance = float
	##cardinality = 0..1
	home_system_partitions = {
		max_systems = int
		min_systems = int

		min_bridges = int
		max_bridges = int

		method = enum[home_system_method]
	}
	##cardinality = 0..1
	open_space_partitions = {
		max_systems = int
		min_systems= int

		min_bridges = int
		max_bridges = int

		method = enum[open_space_method]
	}
	##cardinality = 0..1
	num_wormhole_pairs = {
		min = float
		max = float
	}
	##cardinality = 0..1
	num_wormhole_pairs_default = float
	##cardinality = 0..1
	num_gateways = {
		min = float
		max = float
	}
	##cardinality = 0..1
	num_gateways_default = float
	num_hyperlanes = {
		min = float
		max = float
	}
	num_hyperlanes_default = float

	##cardinality = 0..inf
	supports_shape = <map_galaxy_shape>

	subtype[random] = {
		num_stars = int
		### should be less than 500, preferably less than ~460
		radius = float
		num_nebulas	= int
		nebula_size = float
		nebula_min_dist = float
		cluster_count = {
			method = enum[cluster_method]
			value = int
			##cardinality = 0..1
			max = int
		}
		cluster_radius = float
		cluster_distance_from_core = float
	}
	subtype[static] = {
		core_radius = float[0.0..1.0]
		## cardinality = 0..1
		random_hyperlanes = bool

		## cardinality = 0..inf
		add_hyperlane = {
			from = int
			to = int
		}
		## cardinality = 0..inf
		remove_hyperlane = {
			from = int
			to = int
		}

		system = {
			id = int
			name = localisation
			position = {
				x = int
				y = int
				## cardinality = 0..1
				z = int
			}
			## cardinality = 0..1
			initializer = <solar_system_initializer>
			## cardinality = 0..1
			initializer = <solar_system_initializer_random_list>
			## cardinality = 0..1
			###Weight for whether an empire should spawn in this system
			## replace_scope = { this = country root = country }
			spawn_weight = {
				alias_name[modifier_rule] = alias_match_left[modifier_rule]
			}
			## cardinality = 0..1
			## replace_scope = { this = system root = system }
			effect = {
				alias_name[effect] = alias_match_left[effect]
			}
		}

		## cardinality = 0..inf
		nebula = {
			name = localisation
			position = {
				x = int
				y = int
				## cardinality = 0..1
				z = int
			}
			radius = float
		}

		coordinate_transform = {
			## cardinality = 0..1
			x = {
				## cardinality = 1..inf
				enum[coordinate_transform_method] = float
			}
			## cardinality = 0..1
			y = {
				## cardinality = 1..inf
				enum[coordinate_transform_method] = float
			}
			## cardinality = 0..1
			z = {
				## cardinality = 1..inf
				enum[coordinate_transform_method] = float
			}
		}
	}
}

enums = {
	enum[cluster_method] = {
		one_every_x_empire
		constant
	}
	enum[home_system_method] = {
		breadth_first
	}
	enum[open_space_method] = {
		depth_first
	}
	enum[coordinate_transform_method] = {
		add
		sub
		mul
		div
	}
}
